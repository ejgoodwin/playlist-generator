/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/js/ArtistChip.js":
/*!******************************!*\
  !*** ./src/js/ArtistChip.js ***!
  \******************************/
/***/ (() => {

eval("class ArtistChip extends HTMLElement {\n\tconstructor() {\n\t\tsuper();\n\n\t\t// Shadow DOM.\n\t\tconst shadowRoot = this.attachShadow({mode: 'open'});\n\t\t// let style = document.createElement('link');\n\t\t// style.setAttribute('href', '/css/custom-element.css');\n\t\t// // append stylesheet to Shadow DOM\n\t\t// this.shadowRoot.append(style);\n\t\tshadowRoot.innerHTML = `\n\t\t\t<style>\n\t\t\t\t.artist-chip {\n\t\t\t\t\tbackground: var(--background-3);\n\t\t\t\t\tborder-radius: var(--border-radius);\n\t\t\t\t\tdisplay: grid;\n\t\t\t\t\tgrid-template: auto / 40px 1fr 30px;\n\t\t\t\t\tmargin: .5rem 0;\n\t\t\t\t\tmargin-inline-end: 1rem;\n\t\t\t\t\toverflow: hidden;\n\t\t\t\t}\n\t\t\t\t.artist-chip__close {\n\t\t\t\t\talign-items: center;\n\t\t\t\t\tbackground: 0;\n\t\t\t\t\tborder: 0;\n\t\t\t\t\tdisplay: flex;\n\t\t\t\t\tjustify-content: center;\n\t\t\t\t\torder: 1;\n\t\t\t\t\tpadding:  0 .5rem;\n\t\t\t\t}\n\t\t\t\t.artist-chip__image {\n\t\t\t\t\tbackground-size: cover;\n\t\t\t\t\tmargin: 0 .5rem 0 0;\n\t\t\t\t}\n\t\t\t\t.artist-chip__name {\n\t\t\t\t\tpadding: .5rem;\n\t\t\t\t}\n\t\t\t\t.artist-chip__close:hover {\n\t\t\t\t\tcursor: pointer;\n\t\t\t\t}\n\t\t\t\t.cross {\n\t\t\t\t\tfill: var(--text-colour-secondary);\n\t\t\t\t}\n\t\t\t</style>\n\t\t\t<div class=\"artist-chip\">\n\t\t\t\t<span class=\"artist-chip__image\"></span>\n\t\t\t\t<span class=\"artist-chip__name\"></span>\n\t\t\t\t<button class=\"artist-chip__close\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"14\" viewBox=\"0 0 12.021 12.022\"><rect class=\"cross\" id=\"Rectangle_7\" width=\"15\" height=\"2\" data-name=\"Rectangle 7\" rx=\"1\" transform=\"rotate(-45 12.803782 5.3035)\"/><rect class=\"cross\"  id=\"Rectangle_46\" width=\"15\" height=\"2\" data-name=\"Rectangle 46\" rx=\"1\" transform=\"rotate(45 .707 1.706849)\"/></svg></button>\n\t\t\t</div>\n\t\t`;\n\n\t\t// Add event listener for close button.\n\t\tconst closeButton = this.shadowRoot.querySelector('.artist-chip__close');\n\t\tcloseButton.addEventListener('click', (event) => this.removeChip_(event));\n\t}\n\n\tconnectedCallback() {\n\t\tthis.updateRelatedTracksAttribute_();\n\t\tthis.populateChip();\n\t}\n\n\tpopulateChip() {\n\t\tthis.shadowRoot.querySelector('.artist-chip__name').textContent = this.getAttribute('data-artist-name');\n\t\tthis.shadowRoot.querySelector('.artist-chip__image').style.backgroundImage = `url(${this.getAttribute('data-artist-image')})`;\n\t\tconsole.log('URL', this.getAttribute(\"data-artist-image\"));\n\t}\n\n\tremoveChip_(event) {\n\t\tthis.remove();\n\t\tthis.updateRelatedTracksAttribute_();\n\n\t}\n\n\tupdateRelatedTracksAttribute_() {\n\t\t// Update the attribute on related-tracks element to trigger refresh of tracks data.\n\t\tdocument.querySelector('related-tracks').setAttribute('tracks-set', true)\n\t}\n}\n\nwindow.customElements.define('artist-chip', ArtistChip);\n\n//# sourceURL=webpack://web-api-auth-examples/./src/js/ArtistChip.js?");

/***/ }),

/***/ "./src/js/CreatePlaylist.js":
/*!**********************************!*\
  !*** ./src/js/CreatePlaylist.js ***!
  \**********************************/
/***/ (() => {

eval("class CreatePlaylist extends HTMLElement {\n\tconstructor() {\n\t\tsuper();\n\n\t\t// Shadow DOM.\n\t\tconst shadowRoot = this.attachShadow({mode: 'open'});\n\t\tshadowRoot.innerHTML = `\n\t\t\t<style>\n\t\t\t\t* {\n\t\t\t\t\tbox-sizing: border-box;\n\t\t\t\t}\n\t\t\t\t:host {\n\t\t\t\t\tcolor: var(--text-colour-primary);\n\t\t\t\t}\n\t\t\t\t.create-playlist-heading {\n\t\t\t\t\tmargin-top: 0;\n\t\t\t\t}\n\t\t\t\t.playlist-name-input {\n\t\t\t\t\tbackground: var(--background-3);\n\t\t\t\t\tborder: 0;\n\t\t\t\t\tcolor: var(--text-colour-primary);\n\t\t\t\t\tfont-family: var(--font-family-primary);\n\t\t\t\t\tfont-size: 1rem;\n\t\t\t\t\tpadding: .75rem 1rem;\n\t\t\t\t\tmargin: 0 0 1rem;\n\t\t\t\t\twidth: 100%;\n\t\t\t\t}\n\t\t\t\t.playlist-name-input[input-error] {\n\t\t\t\t\tborder: 1px solid var(--error-colour-bright);\n\t\t\t\t}\n\t\t\t\t.added-tracks {\n\t\t\t\t\tmargin: 0;\n\t\t\t\t\tpadding: 0;\n\t\t\t\t}\n\t\t\t\t.added-track {\n\t\t\t\t\tborder-bottom: 1px solid var(--background-4);\n\t\t\t\t\tdisplay: grid;\n\t\t\t\t\tfont-weight: 500;\n\t\t\t\t\tgrid-gap: 4px 14px;\n\t\t\t\t\tgrid-template: auto / 42px auto 25px;\n\t\t\t\t\tpadding: 14px 0;\n\t\t\t\t}\n\t\t\t\t.added-track__artist {\n\t\t\t\t\tcolor: var(--text-colour-secondary);\n\t\t\t\t\tfont-size: .875rem;\n\t\t\t\t\tgrid-row: 2;\n\t\t\t\t}\n\t\t\t\t.added-track__image {\n\t\t\t\t\tborder-radius: 3px;\n\t\t\t\t\tgrid-row: 1 / span 2;\n\t\t\t\t\twidth: 42px;\n\t\t\t\t}\n\t\t\t\t.added-tracks-container {\n\t\t\t\t\tmargin-bottom: 1rem;\n\t\t\t\t}\n\t\t\t\t.remove-track {\n\t\t\t\t\tbackground: url(images/icon-close.svg) center no-repeat;\n\t\t\t\t\tbackground-size: 16px;\n\t\t\t\t\tborder: 0;\n\t\t\t\t\tcolor: var(--error-colour);\n\t\t\t\t\tgrid-row: 1 / span 2;\n\t\t\t\t\tpadding: .18rem 1rem .2rem .5rem;\n\t\t\t\t}\n\t\t\t\t.remove-track:hover {\n\t\t\t\t\tcolor: var(--error-colour-bright);\n\t\t\t\t\tcursor: pointer;\n\t\t\t\t}\n\t\t\t\t.create-playlist-button {\n\t\t\t\t\tbackground: rgb(113,44,163);\n\t\t\t\t\tbackground: linear-gradient(162deg, rgba(113,44,163,1) 0%, rgba(22,35,137,1) 100%);\n\t\t\t\t\tborder: 0;\n\t\t\t\t\tborder-radius: 100px;\n\t\t\t\t\tcolor: white;\n\t\t\t\t\tfont-family: var(--font-family-primary);\n\t\t\t\t\tfont-size: 1rem;\n\t\t\t\t\tpadding: 12px 24px;\n\t\t\t\t\tposition: relative;\n\t\t\t\t\tz-index: 1;\n\t\t\t\t}\n\t\t\t\t.create-playlist-button-inner {\n\t\t\t\t\tcursor: pointer;\n\t\t\t\t\tz-index: 1;\n\t\t\t\t}\n\t\t\t\t.create-playlist-button::after {\n\t\t\t\t\tbackground: var(--primary-colour-darken);\n\t\t\t\t\tborder-radius: 100px;\n\t\t\t\t\tbottom: 0;\n\t\t\t\t\tcontent: '';\n\t\t\t\t\tcursor: pointer;\n\t\t\t\t\tleft: 0;\n\t\t\t\t\topacity: 0;\n\t\t\t\t\tposition: absolute;\n\t\t\t\t\tright: 0;\n\t\t\t\t\ttop: 0;\n\t\t\t\t\ttransition: .2s;\n\t\t\t\t\tz-index: -1;\n\t\t\t\t}\n\t\t\t\t.create-playlist-button:hover::after {\n\t\t\t\t\topacity: .4;\n\t\t\t\t}\n\t\t\t\t.add-tracks-error {\n\t\t\t\t\tcolor: var(--error-colour-bright);\n\t\t\t\t\tdisplay: none;\n\t\t\t\t}\n\t\t\t\t.add-tracks-error[error-show] {\n\t\t\t\t\tdisplay: block;\n\t\t\t\t}\n\t\t\t\t::-webkit-input-placeholder { /* Chrome/Opera/Safari */\n\t\t\t\t  color: var(--input-placeholder-colour);\n\t\t\t\t}\n\t\t\t\t::-moz-placeholder { /* Firefox 19+ */\n\t\t\t\t  color: var(--input-placeholder-colour);\n\t\t\t\t}\n\t\t\t\t:-ms-input-placeholder { /* IE 10+ */\n\t\t\t\t  color: var(--input-placeholder-colour);\n\t\t\t\t}\n\t\t\t\t:-moz-placeholder { /* Firefox 18- */\n\t\t\t\t  color: var(--input-placeholder-colour);\n\t\t\t\t}\n\t\t\t</style>\n\t\t\t<h2 class=\"create-playlist-heading\">Playlist</h2>\n\t\t\t<input id=\"playlist-name-input\" class=\"playlist-name-input\" type=\"text\" placeholder=\"Playlist name\">\n\t\t\t<div class=\"added-tracks-container\">\n\t\t\t\t<span class=\"add-tracks-error\">Add a track to create a playlist</span>\n\t\t\t</div>\n\t\t\t<button id=\"create-playlist-button\" class=\"create-playlist-button\"><span class=\"create-playlist-button-inner\">Create playlist</span></button>\n\t\t`;\n\n\t\tthis.relatedTracksEl = document.querySelector('related-tracks');\n\t\tthis.trackListContainer = this.shadowRoot.querySelector('.added-tracks-container');\n\t\tthis.createButton = this.shadowRoot.querySelector('#create-playlist-button');\n\t\tthis.playlistNameInput = this.shadowRoot.querySelector('#playlist-name-input');\n\t\tthis.createButton.addEventListener('click', () => this.validatePlaylist_());\n\t\tthis.addTracksError = this.shadowRoot.querySelector('.add-tracks-error');\n\n\t\tthis.params = null;\n\t\tthis.accessToken = null;\n\t\tthis.options = null;\n\t}\n\n\tstatic get observedAttributes() {\n\t  return ['tracks-updated'];\n\t}\n\n\tconnectedCallback() {\n\t\tthis.params = this.getHashParams_();\n\t\tthis.accessToken = this.params.access_token;\n\t\tthis.options = {\n\t\t  'headers': {\n\t\t    'Authorization': `Bearer ${this.accessToken}`\n\t\t  }\n\t\t}\n\n\t\tthis.playlistNameInput.addEventListener('keypress', () => this.inputChange_())\n\t}\n\n\tattributeChangedCallback(attrName, oldVal, newVal) {\n\t\tconst selectedTracks = this.relatedTracksEl.shadowRoot.querySelectorAll('related-track[selected]');\n\t\tconsole.log('selectedTracks', selectedTracks);\n\t\tlet trackList = this.shadowRoot.querySelector('.added-tracks');\n\n\t\tif (trackList) {\n\t\t\ttrackList.remove();\n\t\t}\n\n\t\ttrackList = document.createElement('ul');\n\t\ttrackList.classList.add('added-tracks');\n\t\tthis.trackListContainer.appendChild(trackList);\n\n\t\tfor (const track of selectedTracks) {\n\t\t\t// List item.\n\t\t\tconst newTrack = document.createElement('li');\n\t\t\tnewTrack.setAttribute('added-track-uri', track.getAttribute('track-uri'));\n\t\t\tnewTrack.classList.add('added-track');\n\t\t\t\n\t\t\t// Image.\n\t\t\tconst trackImage = document.createElement('img');\n\t\t\ttrackImage.src = track.querySelector('[slot=\"track-image\"]').src;\n\t\t\ttrackImage.classList.add('added-track__image');\n\t\t\tnewTrack.appendChild(trackImage);\n\n\t\t\t// Track title.\n\t\t\tconst trackTitle = document.createElement('span');\n\t\t\ttrackTitle.textContent = track.querySelector('[slot=\"track-title\"]').textContent;\n\t\t\tnewTrack.appendChild(trackTitle);\n\n\t\t\t// Artist.\n\t\t\tconst trackArtist = document.createElement('span');\n\t\t\ttrackArtist.textContent = track.querySelector('[slot=\"track-artist\"]').textContent;\n\t\t\ttrackArtist.classList.add('added-track__artist');\n\t\t\tnewTrack.appendChild(trackArtist);\n\n\t\t\tconst newTrackRemoveButton = document.createElement('button');\n\t\t\tnewTrackRemoveButton.innerHTML = '';\n\t\t\tnewTrackRemoveButton.classList.add('remove-track');\n\t\t\tnewTrackRemoveButton.addEventListener('click', (event) => this.removeTrack_(event));\n\t\t\tnewTrack.appendChild(newTrackRemoveButton);\n\t\t\t\n\t\t\ttrackList.appendChild(newTrack);\n\t\t}\n\n\t\tif (this.addTracksError.getAttribute('error-show')) {\n\t\t\tthis.addTracksError.removeAttribute('error-show');\n\t\t}\n\t}\n\n\t// TODO: replace this.\n\tgetHashParams_() {\n\t\tconsole.log('params');\n\t\tconst hashParams = {};\n\t\tlet e, r = /([^&;=]+)=?([^&;]*)/g,\n\t\t    q = window.location.hash.substring(1);\n\t\twhile ( e = r.exec(q)) {\n\t\t   hashParams[e[1]] = decodeURIComponent(e[2]);\n\t\t}\n\t\treturn hashParams;\n\t}\n\n\tvalidatePlaylist_() {\n\t\tconst addedTracks = this.shadowRoot.querySelectorAll('.added-track');\n\t\tlet playlistError = false;\n\t\t// TODO: add validation popups for the inputs.\n\t\tif (this.playlistNameInput.value.length < 1) {\n\t\t\tthis.playlistNameInput.setAttribute('input-error', true);\n\t\t\tplaylistError = true\n\t\t} else {\n\t\t\tthis.playlistNameInput.removeAttribute('input-error');\n\t\t}\n\t\tif (addedTracks.length < 1) {\n\t\t\tthis.addTracksError.setAttribute('error-show', true);\n\t\t\tplaylistError = true\n\t\t} else {\n\t\t\tthis.addTracksError.removeAttribute('error-show');\n\t\t}\n\n\t\tif (playlistError) {\n\t\t\treturn;\n\t\t}\n\t\t/*\n\t\t\tTODO:\n\t\t\t- Create playlist.\n\t\t\t- Add songs to playlist.\n\t\t\t- (https://developer.spotify.com/documentation/web-api/reference/#category-playlists)\n\t\t*/\n\n\t\t// Create playlist.\n\t\t// Get current user's profile.\n\t\tconst userUrl = `https://api.spotify.com/v1/me`;\n\t\tconst userOptions = {\n\t\t  'headers': {\n\t\t    'Authorization': `Bearer ${this.accessToken}`\n\t\t  }\n\t\t}\n\t\tfetch(userUrl, userOptions)\n\t\t.then(res => res.json())\n\t\t.then(data => {\n\t\t\tconsole.log(data.id);\n\t\t\tthis.createPlaylist_(data.id);\n\t\t})\n\t}\n\n\tinputChange_() {\n\t\tif (this.playlistNameInput.getAttribute('input-error')) {\n\t\t\tthis.playlistNameInput.removeAttribute('input-error');\n\t\t}\t\n\t}\n\n\tcreatePlaylist_(userId) {\n\t\tconst url = `https://api.spotify.com/v1/users/${userId}/playlists`;\n\t\tconst data =  {\n\t\t\t'name': this.playlistNameInput.value,\n\t\t\t'description': 'description',\n\t\t\t'public': false\n\t\t}\n\n\t\tthis.options['method'] = 'POST';\n\t\tthis.options['body'] = JSON.stringify(data);\n\n\t\tfetch(url, this.options)\n\t\t.then(res => res.json())\n\t\t.then(data => {\n\t\t\tthis.addTracks_(data.id);\n\t\t})\n\t\t.catch((error) => {\n\t\t\tconsole.log(error)\n\t\t})\n\t}\n\n\taddTracks_(playlistId) {\n\t\t// Create JSON object of track uris.\n\t\tconst trackUris = {\n\t\t\t\"uris\": []\n\t\t};\n\t\tconst url = `https://api.spotify.com/v1/playlists/${playlistId}/tracks`;\n\t\tconst addedTracks = this.shadowRoot.querySelectorAll('.added-track');\n\t\tconst trackList = this.shadowRoot.querySelector('.added-tracks');\n\n\t\taddedTracks.forEach((track) => {\n\t\t\tconst uri = track.getAttribute('added-track-uri');\n\t\t\ttrackUris[\"uris\"].push(uri);\n\t\t});\n\n\t\tthis.options['body'] = JSON.stringify(trackUris);\n\n\t\tfetch(url, this.options)\n\t\t.then(res => {\n\t\t\t// TODO: toast for ack - success or failure.\n\t\t\tconsole.log(res);\n\t\t\ttrackList.remove();\n\t\t\tthis.resetRelatedTracks_();\n\t\t\tthis.playlistNameInput.value = '';\n\t\t});\n\t}\n\n\tremoveTrack_(event) {\n\t\tconst item = event.target.closest('li');\n\t\tconst uriAttr = item.getAttribute('added-track-uri');\n\t\tconst relatedTracksSelectedItem = this.relatedTracksEl.shadowRoot.querySelector(`related-track[track-uri=\"${uriAttr}\"]`);\n\t\t\n\t\tif (relatedTracksSelectedItem) {\n\t\t\trelatedTracksSelectedItem.removeAttribute('selected');\n\t\t\trelatedTracksSelectedItem.shadowRoot.querySelector('.track__add').removeAttribute('selected');\n\t\t}\n\t\t\n\t\titem.remove();\n\t}\n\n\tresetRelatedTracks_() {\n\t\tconst selectedTracks = this.relatedTracksEl.shadowRoot.querySelectorAll(`related-track[selected]`);\n\t\tselectedTracks.forEach((track) => {\n\t\t\ttrack.removeAttribute('selected');\n\t\t\ttrack.shadowRoot.querySelector('.track__add').removeAttribute('selected');\n\t\t})\n\t}\n}\n\nwindow.customElements.define('create-playlist', CreatePlaylist);\n\n//# sourceURL=webpack://web-api-auth-examples/./src/js/CreatePlaylist.js?");

/***/ }),

/***/ "./src/js/RecentlyPlayed.js":
/*!**********************************!*\
  !*** ./src/js/RecentlyPlayed.js ***!
  \**********************************/
/***/ (() => {

eval("class RecentlyPlayed extends HTMLElement {\n    constructor() {\n        super();\n\n        // Shadow DOM.\n\t\tconst shadowRoot = this.attachShadow({mode: 'open'});\n\t\tshadowRoot.innerHTML = `\n            <style>\n                .artist-container {\n                    display: grid;\n                    grid-gap: 16px;\n                    grid-template-columns: repeat(2, 1fr);\n                }\n                .artist-button {\n                    align-items: flex-end;\n                    background-position: center;\n                    background-size: cover;\n                    border: 0;\n                    border-radius: 4px;\n                    display: flex;\n                    height: 92px;\n                    opacity: .7;\n                    padding: 0;\n                    transition: .1s;\n                }\n                .artist-button:hover {\n                    cursor: pointer;\n                }\n                .artist-button:hover,\n                .artist-button:hover .artist-name {\n                    opacity: 1;\n                }\n                .artist-name {\n                    background: var(--background-4);\n                    border-radius: 0 0 3px 3px;\n                    color: white;\n                    display: block;\n                    font-family: var(--font-family-primary);\n                    opacity: .85;\n                    padding: 7px 12px;\n                    text-align: initial;\n                    transition: .1s;\n                    width: 100%;\n                }\n            </style>\n            <div class=\"artist-container\"></div>\n        `;\n        \n        // Fetch options.\n        this.options = null;\n        this.url = `https://api.spotify.com/v1/me/top/artists?limit=6`;\n        \n        // Artist container.\n        this.artistContainer = this.shadowRoot.querySelector('.artist-container');\n    }\n\n\tconnectedCallback() { \n\t\tconst params = this.getHashParams_();\n\t\tthis.accessTocken = params.access_token;\n\t\tthis.options = {\n\t\t  'headers': {\n\t\t    'Authorization': `Bearer ${this.accessTocken}`\n\t\t  }\n\t\t}\n        this.fetchRecentlyPlayed();\n\t}\n\n\t// TODO: replace this.\n\tgetHashParams_() {\n\t\tconst hashParams = {};\n\t\tlet e, r = /([^&;=]+)=?([^&;]*)/g,\n\t\t    q = window.location.hash.substring(1);\n\t\twhile ( e = r.exec(q)) {\n\t\t   hashParams[e[1]] = decodeURIComponent(e[2]);\n\t\t}\n\t\treturn hashParams;\n\t}\n\n    fetchRecentlyPlayed() {\n        fetch(this.url, this.options)\n        .then(res => res.json())\n        .then(data => {\n            console.log(data.items)\n            this.displayArtists(data.items);\n        });\n    }\n\n    displayArtists(artists) {\n        // For each artist, create button with image, name and icon.\n        artists.forEach(artist => {\n            const artistButton = document.createElement('button');\n            const artistName = document.createElement('span');\n            // Set image as button background.\n            artistButton.style.backgroundImage = `url(${artist.images[0].url})`;\n            // Add artist name to span.\n            artistName.innerHTML = artist.name;\n            // Add class for styling to span and button.\n            artistName.classList.add('artist-name');\n            artistButton.classList.add('artist-button');\n            // Add event listener.\n            artistButton.addEventListener('click', () => this.addChip(artistButton, artist));\n            // Attach artist name to button and button to container.\n            artistButton.appendChild(artistName);\n            this.artistContainer.appendChild(artistButton);\n        });\n    }\n\n    addChip(artistButton, artist) {\n        // Find the existing chips and filter to see if artist chip already exists. If it does, return.\n        const allChips = document.querySelectorAll('[data-artist-id]');\n        const chipExists = [...allChips].filter((chip) => chip.getAttribute('data-artist-id') === artist.id);\n        if (chipExists.length > 0) {\n            // TODO: add visual acknowledgement that the chip already exists.\n            return;\n        }\n        \n        // Create new artist chip.\n\t\tconst artistChip = document.createElement('artist-chip');\n\t\tartistChip.setAttribute('data-artist-id', artist.id);\n        artistChip.setAttribute('data-artist-name', artist.name);\n        artistChip.setAttribute('data-artist-image', artist.images[0].url);\n\t\t\n        // Append new artist chip to container.\n\t\tconst chipContainer = document.querySelector('.artist-chips');\n\t\tchipContainer.appendChild(artistChip);\n    }\n}\n\nwindow.customElements.define('recently-played', RecentlyPlayed);\n\n//# sourceURL=webpack://web-api-auth-examples/./src/js/RecentlyPlayed.js?");

/***/ }),

/***/ "./src/js/RelatedTrack.js":
/*!********************************!*\
  !*** ./src/js/RelatedTrack.js ***!
  \********************************/
/***/ (() => {

eval("class Track extends HTMLElement {\n    constructor() {\n        super();\n\n        // Shadow DOM.\n        const shadowRoot = this.attachShadow({mode: 'open'});\n        // Add template to shadow DOM.\n        const template = document.getElementById('track-template');\n\t\tconst templateContent = template.content;\n\t\t\n        shadowRoot.innerHTML = `\n            <style>\n\t\t\t* {\n\t\t\t\tbox-sizing: border-box;\n\t\t\t}\n            .close-embed iframe{\n                display: none;\n            }\n\t\t\t.track {\n\t\t\t\talign-items: center;\n\t\t\t\tborder-bottom: 1px solid var(--background-4);\n\t\t\t\tdisplay: grid;\n\t\t\t\tgrid-gap: var(--track-grid-gap);\n    \t\t\tgrid-template: var(--track-grid-template-layout);\n\t\t\t\tpadding: 0 0 12px;\n\t\t\t}\n\t\t\t.track__title {\n\t\t\t\tfont-size: .875rem;\n\t\t\t\tfont-weight: 500;\n\t\t\t}\n\t\t\t.track__title,\n\t\t\t.track__album,\n\t\t\t.track__artist {\n\t\t\t\t-webkit-line-clamp: 2;\n\t\t\t\t-webkit-box-orient: vertical;\n\t\t\t\tdisplay: -webkit-box;\n\t\t\t\toverflow: hidden;\n\t\t\t}\n\t\t\t.track__album,\n\t\t\t.track__artist,\n\t\t\t.track__time {\n\t\t\t\tcolor: var(--text-colour-secondary);\n\t\t\t\tfont-size: .875rem;\n\t\t\t}\n\t\t\t.track__album {\n\t\t\t\tdisplay: none;\n\t\t\t}\n\t\t\t.track__main {\n\t\t\t\talign-items: center;\n\t\t\t\tdisplay: grid;\n\t\t\t\tgrid-gap: 0 12px;\n\t\t\t\tgrid-template: auto / 50px auto;\n\t\t\t}\n\t\t\t.track__add,\n\t\t\t.track__preview {\n\t\t\t\talign-items: center;\n\t\t\t\tborder-radius: 50%;\n\t\t\t\tborder: 0;\n\t\t\t\tcursor: pointer;\n\t\t\t\tdisplay: flex;\n\t\t\t\theight: 35px;\n\t\t\t\tjustify-content: center;\n\t\t\t\tjustify-self: center;\n\t\t\t\tposition: relative;\n\t\t\t\twidth: 35px;\n\t\t\t}\n\t\t\t.track__add {\n\t\t\t\tbackground: rgb(27,101,163);\n\t\t\t\tbackground: linear-gradient(329deg, rgba(27,101,163,1) 0%, rgba(33,147,143,1) 100%);\n\t\t\t}\n\t\t\t.track__add::after,\n\t\t\t.track__preview::after {\n\t\t\t\tborder-radius: 100px;\n\t\t\t\tbottom: 0;\n\t\t\t\tcontent: '';\n\t\t\t\tcursor: pointer;\n\t\t\t\tleft: 0;\n\t\t\t\topacity: 0;\n\t\t\t\tposition: absolute;\n\t\t\t\tright: 0;\n\t\t\t\ttop: 0;\n\t\t\t\ttransition: .2s;\n\t\t\t}\n\t\t\t.track__add::after {\n\t\t\t\tbackground: #35b0b9;\n\t\t\t}\n\t\t\t.track__preview::after {\n\t\t\t\tbackground: #216d9e;\n\t\t\t}\n\t\t\t.track__preview:hover::after {\n\t\t\t\topacity: .4;\n\t\t\t}\n\t\t\t.track__add:hover::after {\n\t\t\t\topacity: .4;\n\t\t\t}\n\t\t\t.track__add-inner,\n\t\t\t.track__preview-inner {\n\t\t\t\talign-items: center;\n\t\t\t\tdisplay: flex;\n\t\t\t\theight: 100%;\n\t\t\t\tjustify-content: center;\n\t\t\t\twidth: 100%;\n\t\t\t\tz-index: 1;\n\t\t\t}\n\t\t\t.track__add[selected] {\n\t\t\t\tbackground: rgb(163,27,163);\n\t\t\t\tbackground: linear-gradient(329deg, rgba(163,27,163,1) 0%, rgba(147,33,81,1) 100%);\t\t\t\t\n\t\t\t}\n\t\t\t.track__add[selected]::after {\n\t\t\t\tbackground: #a31ba3;\n\t\t\t\topcaity: 1;\n\t\t\t}\n\t\t\t.track__add[selected] .track__add-line-2 {\n\t\t\t\ttransform: scaleY(0);\n\t\t\t}\n\t\t\t.track__add-line-1,\n\t\t\t.track__add-line-2 {\n\t\t\t\tbackground: white;\n\t\t\t\tborder-radius: 5px;\n\t\t\t\theight: 3px;\n\t\t\t\topacity: 1;\n\t\t\t\tposition: absolute;\n\t\t\t\ttransition: .1s;\n\t\t\t\twidth: 15px;\n\t\t\t}\n\t\t\t.track__add-line-2 {\n\t\t\t\theight: 15px;\n\t\t\t\twidth: 3px;\n\t\t\t}\n\t\t\t.track__preview {\n\t\t\t\tbackground: rgb(43,70,162);\n\t\t\t\tbackground: linear-gradient(329deg, rgba(43,70,162,1) 0%, rgba(22,80,117,1) 100%);\n\t\t\t}\n\t\t\t.track__preview:hover {\n\t\t\t\tbackground: rgb(43,70,162);\n\t\t\t}\n\t\t\t.track__preview.playing .track__icon {\n\t\t\t\ttransform: rotate(-90deg);\n\t\t\t}\n\t\t\t.track__icon {\n\t\t\t\ttransform: scale(1);\n\t\t\t\ttransition: .1s;\n\t\t\t\twidth: 15px;\n\t\t\t}\n\t\t\t#related-tracks-list {\n\t\t\t\tdisplay: grid;\n\t\t\t\tgrid-gap: .5rem;\n\t\t\t\tlist-style: none;\n\t\t\t\tmargin: 0;\n\t\t\t\tpadding: 0 0 2rem;\n\t\t\t}\n\t\t\t.related-tracks-item-button {\n\t\t\t\tbackground: var(--background-1);\n\t\t\t\tborder: 0;\n\t\t\t\tborder-radius: 0 .25rem .25rem 0;\n\t\t\t\tcolor: var(--text-colour-primary);\n\t\t\t\tfont-size: 16px;\n\t\t\t\tpadding: 1rem 2rem 1rem 1rem;\n\t\t\t\tposition: relative;\n\t\t\t\ttext-align: left;\n\t\t\t\twidth: 100%;\n\t\t\t}\n\t\t\t.related-tracks-item-button:hover {\n\t\t\t\tbackground: var(--background-3);\n\t\t\t\tcursor: pointer;\n\t\t\t}\n\t\t\t.related-tracks-item-button::after {\n\t\t\t\tbackground: var(--background-1);\n\t\t\t\tborder-radius: 50%;\n\t\t\t\tcontent: '';\n\t\t\t\theight: 20px;\n\t\t\t\tposition: absolute;\n\t\t\t\ttransform: translateY(-50%);\n\t\t\t\ttop: 50%;\n\t\t\t\tright: 1rem;\n\t\t\t\twidth: 20px;\n\t\t\t}\n\t\t\t.related-tracks-item-button[selected='true']::after {\n\t\t\t\tbackground: var(--success-colour);\n\t\t\t}\n\t\t\t.related-tracks-item-button-title {\n\t\t\t\tdisplay: block;\n\t\t\t\tfont-weight: 700;\n\t\t\t\tmargin: 0 0 .25rem;\n\t\t\t}\n\t\t\t.related-tracks-item-image {\n\t\t\t\talign-items: center;\n\t\t\t\tbackground-position: center;\n\t\t\t\tbackground-size: cover;\n\t\t\t\tborder-radius: 50%;\n\t\t\t\tdisplay: flex;\n\t\t\t\theight: 60px;\n\t\t\t\tjustify-content: center;\n\t\t\t\tposition: relative;\n\t\t\t\twidth: 60px;\n\t\t\t}\n\t\t\t@media screen and (min-width: 800px) {\n\t\t\t\t.track__album {\n\t\t\t\t\t-webkit-line-clamp: 2;\n\t\t\t\t\t-webkit-box-orient: vertical;\n\t\t\t\t\tdisplay: -webkit-box;\n\t\t\t\t\toverflow: hidden;\n\t\t\t\t}\n\t\t\t\t.track__title {\n\t\t\t\t\tfont-size: 1rem;\n\t\t\t\t}\n\t\t\t\t.track__album,\n\t\t\t\t.track__artist,\n\t\t\t\t.track__time {\n\t\t\t\t\tfont-size: .875rem;\n\t\t\t\t}\n\t\t\t}\n            </style>\n        `;\n        shadowRoot.appendChild(templateContent.cloneNode(true));\n\n        this.buttonAdd = null;\n        this.buttonPreview = null;\n    }\n\n    connectedCallback() {\n        // Store buttons.\n        this.buttonAdd = this.shadowRoot.querySelector('.track__add');\n        this.buttonPreview = this.shadowRoot.querySelector('.track__preview');\n        // Add event listeners to add and preview buttons.\n        this.buttonAdd.addEventListener('click', () => this.addTrack());\n        this.buttonPreview.addEventListener('click', () => this.previewTrack());\n    }\n\n    addTrack() {\n\t\tconst selected = this.getAttribute('selected');\n\t\tif (selected) {\n\t\t\tthis.removeAttribute('selected');\n            this.buttonAdd.removeAttribute('selected');\n\t\t} else {\n\t\t\tthis.setAttribute('selected', true);\n            this.buttonAdd.setAttribute('selected', '');\n\t\t}\t\n\n\t\t// Set create-playlist element attribute to trigger an update.\n\t\tdocument.querySelector('create-playlist').setAttribute('tracks-updated', true);\n\t}\n    \n\tpreviewTrack() {\n        // If the button container already exits, the class for hiding and showing the iframe must be toggled.\n        // If the button container does not exist, it must be created and the iframe appended.\n        const buttonContainer = this.shadowRoot.querySelector('.embed-button-container');\n        if (buttonContainer && buttonContainer.classList.contains('close-embed')) {\n            buttonContainer.classList.remove('close-embed');\n\t\t\tthis.buttonPreview.classList.add('playing');\n            return;\n        }\n        if (buttonContainer) {\n            buttonContainer.classList.add('close-embed');\n\t\t\tthis.buttonPreview.classList.remove('playing');\n            return;\n\t\t} \n        const previewUrl = this.getAttribute('track-id');\n        this.setAttribute('open', '');\n\n        const embedButtonContainer = document.createElement('div');\n        embedButtonContainer.classList.add('embed-button-container');\n        const embedButton = `<iframe src=\"https://open.spotify.com/embed/track/${previewUrl}\" width=\"100%\" height=\"80\" frameborder=\"0\" allowtransparency=\"true\" allow=\"encrypted-media\"></iframe>`\n        embedButtonContainer.innerHTML = embedButton;\n        this.shadowRoot.appendChild(embedButtonContainer);\n\t\tthis.buttonPreview.classList.add('playing');\n\t}\n}\n\nwindow.customElements.define('related-track', Track);\n\n//# sourceURL=webpack://web-api-auth-examples/./src/js/RelatedTrack.js?");

/***/ }),

/***/ "./src/js/RelatedTracks.js":
/*!*********************************!*\
  !*** ./src/js/RelatedTracks.js ***!
  \*********************************/
/***/ (() => {

eval("/*\n\tFind the artist chips, using the artist-id attributes, fetch the related tracks.\n*/\n\nclass RelatedTracks extends HTMLElement {\n\tconstructor() {\n\t\tsuper();\n\n\t\t// Shadow DOM.\n\t\tconst shadowRoot = this.attachShadow({mode: 'open'});\n\t\tshadowRoot.innerHTML = `\n\t\t\t<style>\n\t\t\t* {\n\t\t\t\tbox-sizing: border-box;\n\t\t\t}\n\t\t\t.track__image {\n\t\t\t\tborder-radius: 5px;\n\t\t\t\tgrid-row: 1 /span 2;\n\t\t\t\twidth: 50px;\n\t\t\t}\n\t\t\t.related-tracks__heading {\n\t\t\t\tborder-bottom: 1px solid var(--background-4);\n\t\t\t\tcolor: var(--text-colour-secondary);\n\t\t\t\tdisplay: grid;\n\t\t\t\tfont-size: .75rem;\n\t\t\t\tgrid-gap: var(--track-grid-gap);\n\t\t\t\tgrid-template: var(--track-grid-template-layout);\n\t\t\t\tmargin-bottom: 8px;\n\t\t\t\tpadding-bottom: 8px;\n\t\t\t}\n\t\t\t.related-tracks__heading-add {\n\t\t\t\tgrid-column: 4;\n\t\t\t\tjustify-self: center;\n\t\t\t}\n\t\t\t.related-tracks__heading-album {\n\t\t\t\tdisplay: none;\n\t\t\t}\n\t\t\t.related-tracks__heading-preview {\n\t\t\t\tgrid-column: 3;\n\t\t\t\tjustify-self: center;\n\t\t\t}\n\t\t\t#related-tracks-list {\n\t\t\t\tdisplay: grid;\n\t\t\t\tgrid-gap: .5rem;\n\t\t\t\tlist-style: none;\n\t\t\t\tmargin: 0;\n\t\t\t\tpadding: 0 0 2rem;\n\t\t\t}\n\t\t\t@media screen and (min-width: 800px) { \n\t\t\t\t.related-tracks__heading-album {\n\t\t\t\t\tdisplay: block;\n\t\t\t\t}\n\t\t\t\t.related-tracks__heading-add {\n\t\t\t\t\tgrid-column: 5;\n\t\t\t\t}\n\t\t\t\t.related-tracks__heading-preview {\n\t\t\t\t\tgrid-column: 4;\n\t\t\t\t}\n\t\t\t}\n\t\t\t</style>\n\t\t`;\n\t\tconst template = document.getElementById('tracks-heading');\n\t\tconst templateContent = template.content;\n\t\tshadowRoot.appendChild(templateContent.cloneNode(true));\n\n\t\tconst tickSVG = '<svg xmlns=\"http://www.w3.org/2000/svg\" aria-hidden=\"true\" class=\"svg-inline--fa fa-check-circle fa-w-16\" data-icon=\"check-circle\" data-prefix=\"far\" viewBox=\"0 0 512 512\"><path fill=\"currentColor\" d=\"M256 8C119.033 8 8 119.033 8 256s111.033 248 248 248 248-111.033 248-248S392.967 8 256 8zm0 48c110.532 0 200 89.451 200 200 0 110.532-89.451 200-200 200-110.532 0-200-89.451-200-200 0-110.532 89.451-200 200-200m140.204 130.267-22.536-22.718c-4.667-4.705-12.265-4.736-16.97-.068L215.346 303.697l-59.792-60.277c-4.667-4.705-12.265-4.736-16.97-.069l-22.719 22.536c-4.705 4.667-4.736 12.265-.068 16.971l90.781 91.516c4.667 4.705 12.265 4.736 16.97.068l172.589-171.204c4.704-4.668 4.734-12.266.067-16.971z\"/></svg>'\n\n\t\tthis.artistIds = [];\n\n\t\t// Parameters from the hash of the url.\n\t\tthis.params = null;\n\t\tthis.accessToken = null;\n\n\t\t// Fetch options.\n\t\tthis.options = null\n\n\t\tthis.relatedArtists = [];\n\t\tthis.relatedArtistsIds = [];\n\t\tthis.relatedTracksList = [];\n\t\tthis.chosenTracks = [];\n\t}\n\n\tstatic get observedAttributes() {\n\t  return ['tracks-set'];\n\t}\n\n\tconnectedCallback() {\n\t\tthis.getArtistIds_();\n\n\t\tthis.params = this.getHashParams_();\n\t\tthis.accessToken = this.params.access_token;\n\t\tthis.options = {\n\t\t  'headers': {\n\t\t    'Authorization': `Bearer ${this.accessToken}`\n\t\t  }\n\t\t}\n\t}\n\n\tattributeChangedCallback(attrName, oldVal, newVal) {\n\t\tthis.getArtistIds_();\n\n\t\tlet trackList = this.shadowRoot.querySelector('#related-tracks-list');\n\t\tconst trackItems = this.shadowRoot.querySelectorAll('related-track');\n\t\t// Remove tracks that are not selected. Keep the selected tracks so that when another artist\n\t\t// is added and new related tracks are generated, the user does not lose the tracks that are already selected.\n\t\ttrackItems.forEach((item) => {\n\t\t\tif (!item.hasAttribute('selected')) {\n\t\t\t\titem.remove();\n\t\t\t}\n\t\t});\n\n\t\tif (!trackList) {\n\t\t\ttrackList = document.createElement('div');\n\t\t\ttrackList.id = 'related-tracks-list';\n\t\t\tthis.shadowRoot.appendChild(trackList);\n\t\t}\n\t}\n\n\t// TODO: replace this.\n\tgetHashParams_() {\n\t\tconsole.log('params');\n\t\tconst hashParams = {};\n\t\tlet e, r = /([^&;=]+)=?([^&;]*)/g,\n\t\t    q = window.location.hash.substring(1);\n\t\twhile ( e = r.exec(q)) {\n\t\t   hashParams[e[1]] = decodeURIComponent(e[2]);\n\t\t}\n\t\treturn hashParams;\n\t}\n\n\tgetArtistIds_() {\n\t\t// Reset artists ID list.\n\t\tthis.artistIds = [];\n\n\t\t// Get all artist chips and store their artist IDs.\n\t\tconst artistChips = document.querySelectorAll('artist-chip');\n\t\t\n\t\tfor(const artist of artistChips) {\n\t\t\tconst artistId = artist.getAttribute('data-artist-id');\n\t\t\tthis.artistIds.push(artistId);\n\t\t}\n\t\tthis.getRelatedArtists_();\n\t}\n\n\tgetRelatedArtists_() {\n\t\tconst artistUrls = [];\n\t\tthis.relatedArtists = [];\n\n\t\tfor (const id of this.artistIds) {\n\t\t\tartistUrls.push(`https://api.spotify.com/v1/artists/${id}/related-artists`);\n\t\t}\n\n\t\tPromise.all(\n\t\t\tartistUrls.map(url => {\n\t\t\t\tfetch(url, this.options)\n\t\t\t\t.then(res => res.json())\n\t\t\t\t.then(data => {\n\t\t\t\t\tthis.extractIds_(data);\n\t\t\t\t\tthis.getRelatedTracks_();\n\t\t\t\t})\n\t\t\t})\n\t\t)\n\t}\n\n\textractIds_(data) {\n\t\tthis.relatedArtistsIds = [];\n\t\tfor (const artist of data.artists) {\n\t\t\tthis.relatedArtistsIds.push(artist.id);\n\t\t}\n\t}\n\n\tgetRelatedTracks_() {\n\t\tlet trackUrls = [];\n\n\t\t// Limit number of tracks based on the amount on artists (artist chips) being used.\n\t\tconst limit = Math.floor(this.relatedArtistsIds.length / this.artistIds.length);\n\t\tthis.relatedArtistsIds.forEach((id, counter) => {\n\t\t\tif (counter > limit) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\ttrackUrls.push(`https://api.spotify.com/v1/artists/${id}/top-tracks?market=from_token`);\n\t\t});\n\n\t\tPromise.all(\n\t\t\ttrackUrls.map(url => {\n\t\t\t\tfetch(url, this.options)\n\t\t\t\t.then(res => res.json())\n\t\t\t\t.then(tracks => {\n\t\t\t\t\tconst randomNumber = Math.floor(Math.random() * tracks.tracks.length);\n\t\t\t\t\tconst randomTrack = tracks.tracks[randomNumber];\n\t\t\t\t\tthis.displayTracks_(randomTrack);\n\t\t\t\t})\n\t\t\t})\n\t\t)\n\t}\n\n\tdisplayTracks_(track) {\n\t\t// Calculate track time.\n\t\tconst minutes = Math.floor(track.duration_ms / 60000);\n\t\tconst seconds = ((track.duration_ms % 60000) / 1000).toFixed(0);\n\t\tconst duration = `${minutes}:${(seconds < 10 ? '0' : '') + seconds}`;\n\t\t// Create new <related-track> element.\n\t\tconst trackElement = document.createElement('related-track');\n\t\ttrackElement.setAttribute('track-id', track.id);\n\t\ttrackElement.setAttribute('track-uri', track.uri);\n\t\t// Add slot info.\n\t\ttrackElement.insertAdjacentHTML('beforeEnd', `<span slot=\"track-title\">${track.name}</span>`);\n\t\ttrackElement.insertAdjacentHTML('beforeEnd', `<span slot=\"track-artist\">${track.artists[0].name}</span>`);\n\t\ttrackElement.insertAdjacentHTML('beforeEnd', `<span slot=\"track-album\">${track.album.name}</span>`);\n\t\ttrackElement.insertAdjacentHTML('beforeEnd', `<span slot=\"track-time\">${duration}</span>`);\n\t\ttrackElement.insertAdjacentHTML('beforeEnd', `<img slot=\"track-image\" alt=\"\" class=\"track__image\" src=${track.album.images[0].url}>`);\n\n\t\tconst trackList = this.shadowRoot.querySelector('#related-tracks-list');\n\t\tconst trackListItems = this.shadowRoot.querySelectorAll('related-track');\n\t\t// Random number used to add new track in list.\n\t\tlet randomTrackInsert =  Math.floor(Math.random() * trackListItems.length);\n\t\t// Add the tracks in random order to mix multiple artists.\n\t\tif (trackListItems.length > 1) {\n\t\t\t// Insert new items before the selected tracks so that selected tracks are placed at the bottom of the list.\n\t\t\twhile (trackListItems[randomTrackInsert].hasAttribute('selected') &&\n\t\t\t\trandomTrackInsert != 0) {\n\t\t\t\t\trandomTrackInsert--;\n\t\t\t}\n\t\t\ttrackList.insertBefore(trackElement, trackListItems[randomTrackInsert]);\n\t\t} else {\n\t\t\ttrackList.appendChild(trackElement);\n\t\t}\n\t}\n}\n\nwindow.customElements.define('related-tracks', RelatedTracks);\n\n//# sourceURL=webpack://web-api-auth-examples/./src/js/RelatedTracks.js?");

/***/ }),

/***/ "./src/js/SearchBar.js":
/*!*****************************!*\
  !*** ./src/js/SearchBar.js ***!
  \*****************************/
/***/ (() => {

eval("/*\n\tSearch bar: take the value of the input and fetch related artists to\n\tprovide suggested artists.\n*/\n\nclass SearchBar extends HTMLElement {\n\tconstructor() {\n\t\tsuper();\n\n\t\t// Shadow DOM.\n\t\tconst shadowRoot = this.attachShadow({mode: 'open'});\n\t\t// let template = document.getElementById('test-template');\n\t\t// let templateContent = template.content;\n\t\t// shadowRoot.appendChild(templateContent.cloneNode(true));\n\t\tshadowRoot.innerHTML = `\n\t\t\t<style>\n\t\t\t\t* {\n\t\t\t\t  box-sizing: border-box;\n\t\t\t\t}\n\t\t\t\t:host {\n\t\t\t\t\tcolor: var(--text-colour-primary);\n\t\t\t\t}\n\t\t\t\t.search-bar-artist {\n\t\t\t\t\tbackground: transparent;\n\t\t\t\t\tborder: var(--border-primary);\n\t\t\t\t\tborder-radius: 5rem;\n\t\t\t\t\tcolor: var(--text-colour-primary);\n\t\t\t\t\tfont-size: 1.25rem;\n\t\t\t\t\tpadding: .75rem 1.5rem;\n\t\t\t\t\tposition: relative;\n\t\t\t\t\twidth: 100%;\n\t\t\t\t}\n\t\t\t\t#artist-list-container {\n\t\t\t\t\tbackground: var(--background-2);\n\t\t\t\t\tbox-shadow: 0px 2px 8px rgb(0 0 0 / 20%);\n\t\t\t\t\tlist-style: none;\n\t\t\t\t\tmargin: 1rem 0 0;\n\t\t\t\t\tmin-width: 350px;\n\t\t\t\t\tpadding: .5rem;\n\t\t\t\t\tposition: absolute;\n\t\t\t\t\tz-index: 2;\n\t\t\t\t}\n\t\t\t\t.artist-list-button {\n\t\t\t\t\tbackground: var(--background-2);\n\t\t\t\t\tborder: 0;\n\t\t\t\t\tborder-radius: 0;\n\t\t\t\t\tcolor: var(--text-colour-primary);\n\t\t\t\t\tfont-size: 16px;\n\t\t\t\t\tpadding: .5rem 1rem;\n\t\t\t\t\ttext-align: left;\n\t\t\t\t\twidth: 100%;\n\t\t\t\t}\n\t\t\t\t.artist-list-button:hover {\n\t\t\t\t\tbackground: var(--background-3);\n\t\t\t\t\tcursor: pointer;\n\t\t\t\t}\n\t\t\t\t::-webkit-input-placeholder { /* Chrome/Opera/Safari */\n\t\t\t\t  color: var(--input-placeholder-colour);\n\t\t\t\t}\n\t\t\t\t::-moz-placeholder { /* Firefox 19+ */\n\t\t\t\t  color: var(--input-placeholder-colour);\n\t\t\t\t}\n\t\t\t\t:-ms-input-placeholder { /* IE 10+ */\n\t\t\t\t  color: var(--input-placeholder-colour);\n\t\t\t\t}\n\t\t\t\t:-moz-placeholder { /* Firefox 18- */\n\t\t\t\t  color: var(--input-placeholder-colour);\n\t\t\t\t}\n\t\t\t\t@media only screen and (min-width: 1200px) {\n\t\t\t\t\t#search-bar-container {\n\t\t\t\t\t\twidth: 50%;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t</style>\n\t\t\t<div id=\"search-bar-container\">\n\t\t\t\t<input \n\t\t\t\t\ttype=\"text\" \n\t\t\t\t\tname=\"search-artist\" \n\t\t\t\t\tid=\"search-artist\" \n\t\t\t\t\tclass=\"search-bar-artist\"\n\t\t\t\t\tplaceholder=\"Search\">\n\t\t\t</div>\n\t\t\t`;\n\n\t\t// Search bar input value\n\t\tthis.searchInput = this.shadowRoot.querySelector('#search-artist');\n\n\t\t// API endpoint.\n\t\tthis.relatedArtistsUrl = '';\n\n\t\t// Parameters from the hash of the url.\n\t\tthis.params = null;\n\t\tthis.accessTocken = null;\n\n\t\t// Fetch options.\n\t\tthis.options = null\n\n\t\t// List of artists returned from fetch.\n\t\tthis.artistsList = null;\n\n\t\t// The container for the input and dropdown.\n\t\tthis.searchBarContainer = this.shadowRoot.querySelector('#search-bar-container');\n\t}\n\n\tconnectedCallback() { \n\t\tthis.params = this.getHashParams_();\n\t\tthis.accessTocken = this.params.access_token;\n\t\tthis.options = {\n\t\t  'headers': {\n\t\t    'Authorization': `Bearer ${this.accessTocken}`\n\t\t  }\n\t\t}\n\n\t\tthis.addEventListener('input', this.fetchSuggestedArtists_);\n\t}\n\n\t// TODO: replace this.\n\tgetHashParams_() {\n\t\tconsole.log('params');\n\t\tconst hashParams = {};\n\t\tlet e, r = /([^&;=]+)=?([^&;]*)/g,\n\t\t    q = window.location.hash.substring(1);\n\t\twhile ( e = r.exec(q)) {\n\t\t   hashParams[e[1]] = decodeURIComponent(e[2]);\n\t\t}\n\t\treturn hashParams;\n\t}\n\n\tfetchSuggestedArtists_() {\n\t\t// Return if there is no input value.\n\t\tif (this.searchInput.value.length < 1) {\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tthis.relatedArtistsUrl = `https://api.spotify.com/v1/search?q=${this.searchInput.value}&type=track,album,artist&limit=10`;\n\n\t\tfetch(this.relatedArtistsUrl, this.options)\n\t\t.then(res => res.json())\n\t\t.then(data => {\n\t\t\tthis.artistsList = data.artists\n\t\t\tthis.displayArtists_();\n\t\t});\n\t}\n\n\tdisplayArtists_() {\n\t\t// Return if there are no artists.\n\t\tif (this.artistsList === null) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Remove previous list so that an updated list can be added.\n\t\tlet artistListContainer = this.shadowRoot.querySelector('#artist-list-container');\n\t\tif (artistListContainer) {\n\t\t\tartistListContainer.remove();\n\t\t}\n\n\t\t// Create ul and append to shadow root.\n\t\tartistListContainer = document.createElement('ul');\n\t\tartistListContainer.id = 'artist-list-container';\n\t\tthis.shadowRoot.appendChild(artistListContainer);\n\n\t\tfor (const artist of this.artistsList.items) {\n\t\t\tconst artistListItem = document.createElement('li');\n\t\t\tconst artistListItemButton = document.createElement('button');\n\t\t\tartistListItemButton.classList.add('artist-list-button');\n\t\t\tartistListItemButton.innerHTML = artist.name;\n\t\t\tartistListItemButton.addEventListener('click', () => this.chooseArtist_(artist.id, artist.name, artist.images[0].url));\n\t\t\tartistListItem.appendChild(artistListItemButton);\n\t\t\tartistListContainer.appendChild(artistListItem);\n\t\t}\n\t}\n\n\tchooseArtist_(artistId, artistName, artistImage) {\n\t\t// Find the existing chips and filter to see if artist chip already exists. If it does, return.\n\t\tconst allChips = document.querySelectorAll('[data-artist-id]');\n\t\tconst chipExists = [...allChips].filter((chip) => chip.getAttribute('data-artist-id') === artistId);\n\t\tif (chipExists.length === 0) {\n\t\t\t// TODO: add visual acknowledgement that the chip already exists.\n\t\t\t// Create new artist chip.\n\t\t\tconst artistChip = document.createElement('artist-chip');\n\t\t\tartistChip.setAttribute('data-artist-id', artistId);\n\t\t\tartistChip.setAttribute('data-artist-name', artistName);\n\t\t\tartistChip.setAttribute('data-artist-image', artistImage);\n\n\t\t\t// Append new artist chip to container.\n\t\t\tconst chipContainer = document.querySelector('.artist-chips');\n\t\t\tchipContainer.appendChild(artistChip);\n\t\t}\n\t\t// Remove previous list once an artist has been selected.\n\t\tthis.shadowRoot.querySelector('#artist-list-container').remove();\n\t\t// Reset search input.\n\t\tthis.searchInput.value = '';\n\t}\n}\n\nwindow.customElements.define('search-bar', SearchBar);\n\n\n//# sourceURL=webpack://web-api-auth-examples/./src/js/SearchBar.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	__webpack_modules__["./src/js/ArtistChip.js"]();
/******/ 	__webpack_modules__["./src/js/CreatePlaylist.js"]();
/******/ 	__webpack_modules__["./src/js/RecentlyPlayed.js"]();
/******/ 	__webpack_modules__["./src/js/RelatedTrack.js"]();
/******/ 	__webpack_modules__["./src/js/RelatedTracks.js"]();
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/js/SearchBar.js"]();
/******/ 	
/******/ })()
;